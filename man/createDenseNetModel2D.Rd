% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/createDenseNetModel.R
\name{createDenseNetModel2D}
\alias{createDenseNetModel2D}
\title{2-D implementation of the DenseNet deep learning architecture.}
\usage{
createDenseNetModel2D(inputImageSize, numberOfClassificationLabels = 1000,
  numberOfFilters = 16, depth = 7, numberOfDenseBlocks = 1,
  growthRate = 12, dropoutRate = 0.2, weightDecay = 1e-04)
}
\arguments{
\item{inputImageSize}{Used for specifying the input tensor shape.  The
shape (or dimension) of that tensor is the image dimensions followed by
the number of channels (e.g., red, green, and blue).  The batch size
(i.e., number of training images) is not specified a priori.}

\item{numberOfClassificationLabels}{Number of segmentation labels.}

\item{depth}{number of layers---must be equal to 3 * N + 4 where
N is an integer (default = 7).}

\item{numberOfDenseBlocks}{number of dense blocks to add to the end 
(default = 1).}

\item{growthRate}{number of filters to add for each dense block layer
(default = 12).}

\item{dropoutRate}{= per drop out layer rate (default = 0.2)}

\item{weightDecay}{= weight decay (default = 1e-4)}
}
\value{
an DenseNet keras model
}
\description{
Creates a keras model of the DenseNet deep learning architecture for image 
recognition based on the paper
}
\details{
G. Huang, Z. Liu, K. Weinberger, and L. van der Maaten. Densely Connected 
  Convolutional Networks Networks

available here:

https://arxiv.org/abs/1608.06993

This particular implementation was influenced by the following python 
implementation:

https://github.com/tdeboissiere/DeepLearningImplementations/blob/master/DenseNet/densenet.py
}
\examples{

\dontrun{ 

library( keras )

mnistData <- dataset_mnist()

numberOfLabels <- length( unique( mnistData$train$y ) )

X_train <- array( mnistData$train$x, dim = c( dim( mnistData$train$x ), 1 ) )
Y_train <- keras::to_categorical( mnistData$train$y, numberOfLabels )

# we add a dimension of 1 to specify the channel size
inputImageSize <- c( dim( mnistData$train$x )[2:3], 1 )

denseNetModel <- createDenseNetModel2D( inputImageSize = inputImageSize, 
  numberOfClassificationLabels = numberOfLabels )

denseNetModel \%>\% compile( loss = 'categorical_crossentropy',
  optimizer = optimizer_adam( lr = 0.0001 ),  
  metrics = c( 'categorical_crossentropy', 'accuracy' ) )

track <- denseNetModel \%>\% fit( X_train, Y_train, epochs = 40, batch_size = 32, 
  verbose = 1, shuffle = TRUE, validation_split = 0.2 )

# Now test the model

X_test <- array( mnistData$test$x, dim = c( dim( mnistData$test$x ), 1 ) )
Y_test <- keras::to_categorical( mnistData$test$y, numberOfLabels )

testingMetrics <- denseNetModel \%>\% evaluate( X_test, Y_test )
predictedData <- denseNetModel \%>\% predict( X_test, verbose = 1 )

}
}
\author{
Tustison NJ
}
