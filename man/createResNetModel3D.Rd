% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/createResNetModel.R
\name{createResNetModel3D}
\alias{createResNetModel3D}
\title{3-D implementation of the ResNet deep learning architecture.}
\usage{
createResNetModel3D(inputImageSize, numberOfClassificationLabels = 1000,
  layers = 1:4, residualBlockSchedule = c(3, 4, 6, 3),
  lowestResolution = 64, cardinality = 1)
}
\arguments{
\item{inputImageSize}{Used for specifying the input tensor shape.  The
shape (or dimension) of that tensor is the image dimensions followed by
the number of channels (e.g., red, green, and blue).  The batch size
(i.e., number of training images) is not specified a priori.}

\item{numberOfClassificationLabels}{Number of segmentation labels.}

\item{layers}{a vector determining the number of 'filters' defined at
for each layer.}

\item{residualBlockSchedule}{vector defining the how many residual blocks
repeats.}

\item{lowestResolution}{number of filters at the beginning and end of 
the 'U'.}

\item{cardinality}{perform  ResNet (cardinality = 1) or ResNeXt 
(cardinality != 1 but powers of 2---try '32' )}
}
\value{
an ResNet keras model
}
\description{
Creates a keras model of the ResNet deep learning architecture for image 
classification.  The paper is available here:
}
\details{
https://arxiv.org/abs/1512.03385

This particular implementation was influenced by the following python 
implementation:

https://gist.github.com/mjdietzx/0cb95922aac14d446a6530f87b3a04ce
}
\examples{

\dontrun{ 

library( keras )

mnistData <- dataset_mnist()

numberOfLabels <- length( unique( mnistData$train$y ) )

X_train <- array( mnistData$train$x, dim = c( dim( mnistData$train$x ), 1 ) )
Y_train <- keras::to_categorical( mnistData$train$y, numberOfLabels )

# we add a dimension of 1 to specify the channel size
inputImageSize <- c( dim( mnistData$train$x )[2:3], 1 )

resNetModel <- createResNetModel2D( inputImageSize = inputImageSize, 
  numberOfClassificationLabels = numberOfLabels )

resNetModel \%>\% compile( loss = 'categorical_crossentropy',
  optimizer = optimizer_adam( lr = 0.0001 ),  
  metrics = c( 'categorical_crossentropy', 'accuracy' ) )

track <- resNetModel \%>\% fit( X_train, Y_train, epochs = 40, batch_size = 32, 
  verbose = 1, shuffle = TRUE, validation_split = 0.2 )

# Now test the model

X_test <- array( mnistData$test$x, dim = c( dim( mnistData$test$x ), 1 ) )
Y_test <- keras::to_categorical( mnistData$test$y, numberOfLabels )

testingMetrics <- resNetModel \%>\% evaluate( X_test, Y_test )
predictedData <- resNetModel \%>\% predict( X_test, verbose = 1 )

}
}
\author{
Tustison NJ
}
