% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/randomImageTransformAugmentation.R
\name{randomImageTransformAugmentation}
\alias{randomImageTransformAugmentation}
\title{Apply random transforms to a predictor / outcome training image set}
\usage{
randomImageTransformAugmentation(imageDomain, predictorImageList,
  outcomeImageList, n = 8, typeOfTransform = "Affine",
  interpolator = c("linear", "nearestNeighbor"), sdAffine = 1,
  nControlPoints = 100, spatialSmoothing = 3, composeToField = FALSE,
  directoryName)
}
\arguments{
\item{imageDomain}{defines the spatial domain for all images.  NOTE: if the
input images do not match the spatial domain of the domain image, we
internally resample the target to the domain.  This may have unexpected
consequences if you are not aware of this.  This operation will test
\code{antsImagePhysicalSpaceConsistency} then call
\code{resampleImageToTarget} upon failure.}

\item{predictorImageList}{list of lists of image predictors}

\item{outcomeImageList}{list of image outcomes}

\item{n}{number of simulations to run}

\item{typeOfTransform}{one of the following options
\code{c("Translation","Rigid","ScaleShear","Affine","Deformation",
  "AffineAndDeformation")}}

\item{interpolator}{nearestNeighbor or linear (string) for predictor and
outcome images respectively}

\item{sdAffine}{roughly controls deviation from identity matrix}

\item{nControlPoints}{number of control points for simulated deformation}

\item{spatialSmoothing}{spatial smoothing for simulated deformation}

\item{composeToField}{defaults to FALSE, will return deformation fields
otherwise i.e. maps any transformation to a single deformation field.}

\item{directoryName}{where to write to disk (optional)}
}
\value{
list (if no directory set) or boolean for success, failure
}
\description{
The function will apply rigid, affine or deformable maps to an input set of
training images.  The reference image domain defines the space in which this
happens.
}
\examples{

library( ANTsR )
i1 = antsImageRead( getANTsRData( "r16" ) )
i2 = antsImageRead( getANTsRData( "r64" ) )
s1 = thresholdImage( i1, "Otsu", 3 )
s2 = thresholdImage( i2, "Otsu", 3 )
rand = randomImageTransformAugmentation( i1,
  list( list(i1), list(i2) ),  list( s1, s2 ) )

}
\seealso{
\code{\link{randomImageTransformBatchGenerator}}
}
\author{
Avants BB
}
