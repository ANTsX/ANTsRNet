% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/createResUnetModel.R
\name{createResUnetModel3D}
\alias{createResUnetModel3D}
\title{3-D implementation of the Resnet + U-net deep learning architecture.}
\usage{
createResUnetModel3D(
  inputImageSize,
  numberOfOutputs = 1,
  numberOfFiltersAtBaseLayer = 32,
  bottleNeckBlockDepthSchedule = c(3, 4),
  convolutionKernelSize = c(3, 3, 3),
  deconvolutionKernelSize = c(2, 2, 2),
  dropoutRate = 0,
  weightDecay = 1e-04,
  mode = "classification"
)
}
\arguments{
\item{inputImageSize}{Used for specifying the input tensor shape.  The
shape (or dimension) of that tensor is the image dimensions followed by
the number of channels (e.g., red, green, and blue).  The batch size
(i.e., number of training images) is not specified a priori.}

\item{numberOfOutputs}{Meaning depends on the \code{mode}.  For
'classification' this is the number of segmentation labels.  For 'regression'
this is the number of outputs.}

\item{numberOfFiltersAtBaseLayer}{number of filters at the beginning and end
of the \verb{'U'}.  Doubles at each descending/ascending layer.}

\item{bottleNeckBlockDepthSchedule}{vector that provides the encoding layer
schedule for the number of bottleneck blocks per long skip connection.}

\item{convolutionKernelSize}{2-d vector defining the kernel size
during the encoding path}

\item{deconvolutionKernelSize}{2-d vector defining the kernel size
during the decoding}

\item{dropoutRate}{float between 0 and 1 to use between dense layers.}

\item{weightDecay}{weighting parameter for L2 regularization of the
kernel weights of the convolution layers.  Default = 0.0.}

\item{mode}{'classification' or 'regression'.  Default = 'classification'.}
}
\value{
a res/u-net keras model
}
\description{
Creates a keras model of the U-net + ResNet deep learning architecture for
image segmentation and regression with the paper available here:
}
\details{
\preformatted{    \url{https://arxiv.org/abs/1608.04117}
}

This particular implementation was ported from the following python
implementation:\preformatted{    \url{https://github.com/veugene/fcn_maker/}
}
}
\examples{

library( ANTsRNet )
library( keras )

model <- createResUnetModel3D( c( 64, 64, 64, 1 ) )

metric_multilabel_dice_coefficient <-
  custom_metric( "multilabel_dice_coefficient",
    multilabel_dice_coefficient )

loss_dice <- function( y_true, y_pred ) {
  -multilabel_dice_coefficient(y_true, y_pred)
}
attr(loss_dice, "py_function_name") <- "multilabel_dice_coefficient"

model \%>\% compile( loss = loss_dice,
  optimizer = optimizer_adam( lr = 0.0001 ),
  metrics = c( metric_multilabel_dice_coefficient,
    metric_categorical_crossentropy ) )

print( model )

}
\author{
Tustison NJ
}
