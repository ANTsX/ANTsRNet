% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/createVggModel.R
\name{createFullyConvolutionalVggModel3D}
\alias{createFullyConvolutionalVggModel3D}
\title{3-D implementation of the VGG deep learning architecture without classification
layers.}
\usage{
createFullyConvolutionalVggModel3D(
  inputImageSize,
  layers = c(1, 2, 3, 4, 4),
  lowestResolution = 64,
  convolutionKernelSize = c(3, 3, 3),
  poolSize = c(2, 2, 2),
  strides = c(2, 2, 2),
  dropoutRate = 0,
  style = 19,
  activation = "relu"
)
}
\arguments{
\item{inputImageSize}{Used for specifying the input tensor shape.  The
shape (or dimension) of that tensor is the image dimensions followed by
the number of channels (e.g., red, green, and blue).  The batch size
(i.e., number of training images) is not specified a priori.}

\item{layers}{a vector determining the number of 'filters' defined at
for each layer.}

\item{lowestResolution}{number of filters at the beginning.}

\item{convolutionKernelSize}{3-d vector definining the kernel size
during the encoding path}

\item{poolSize}{3-d vector defining the region for each pooling layer.}

\item{strides}{3-d vector describing the stride length in each direction.}

\item{dropoutRate}{float between 0 and 1 to use between dense layers.}

\item{style}{\verb{'16'} or \verb{'19'} for VGG16 or VGG19, respectively.}

\item{activation}{activation function for convolutional layer.}
}
\value{
a VGG keras model
}
\description{
Creates a keras model of the Vgg deep learning architecture for image
recognition based on the paper
}
\details{
K. Simonyan and A. Zisserman, Very Deep Convolutional Networks for
Large-Scale Image Recognition

available here:\preformatted{    \url{https://arxiv.org/abs/1409.1556}
}

This particular implementation was influenced by the following python
implementation:\preformatted{    \url{https://gist.github.com/baraldilorenzo/8d096f48a1be4a2d660d}
}
}
\author{
Tustison NJ
}
