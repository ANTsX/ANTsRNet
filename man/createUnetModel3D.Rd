% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/createUnetModel.R
\name{createUnetModel3D}
\alias{createUnetModel3D}
\title{3-D image segmentation implementation of the U-net deep learning architecture.}
\usage{
createUnetModel3D(
  inputImageSize,
  numberOfOutputs = 2,
  numberOfLayers = 4,
  numberOfFiltersAtBaseLayer = 32,
  convolutionKernelSize = c(3, 3, 3),
  deconvolutionKernelSize = c(2, 2, 2),
  poolSize = c(2, 2, 2),
  strides = c(2, 2, 2),
  dropoutRate = 0,
  weightDecay = 0,
  mode = "classification"
)
}
\arguments{
\item{inputImageSize}{Used for specifying the input tensor shape.  The
shape (or dimension) of that tensor is the image dimensions followed by
the number of channels (e.g., red, green, and blue).  The batch size
(i.e., number of training images) is not specified a priori.}

\item{numberOfOutputs}{Meaning depends on the \code{mode}.  For
'classification' this is the number of segmentation labels.  For 'regression'
this is the number of outputs.}

\item{numberOfLayers}{number of encoding/decoding layers.}

\item{numberOfFiltersAtBaseLayer}{number of filters at the beginning and end
of the \verb{'U'}.  Doubles at each descending/ascending layer.}

\item{convolutionKernelSize}{3-d vector defining the kernel size
during the encoding path.}

\item{deconvolutionKernelSize}{3-d vector defining the kernel size
during the decoding.}

\item{poolSize}{3-d vector defining the region for each pooling layer.}

\item{strides}{3-d vector describing the stride length in each direction.}

\item{dropoutRate}{float between 0 and 1 to use between dense layers.}

\item{weightDecay}{weighting parameter for L2 regularization of the
kernel weights of the convolution layers.  Default = 0.0.}

\item{mode}{'classification' or 'regression' or 'sigmoid'.  Default = 'classification'.}
}
\value{
a u-net keras model
}
\description{
Creates a keras model of the U-net deep learning architecture for image
segmentation and regression.  More information is provided at the authors'
website:
}
\details{
\preformatted{    \url{https://lmb.informatik.uni-freiburg.de/people/ronneber/u-net/}
}

with the paper available here:\preformatted{    \url{https://arxiv.org/abs/1505.04597}
}

This particular implementation was influenced by the following python
implementation:\preformatted{    \url{https://github.com/joelthelion/ultrasound-nerve-segmentation}
}
}
\examples{
# Simple examples, must run successfully and quickly. These will be tested.

library( ANTsRNet )
library( keras )

model <- createUnetModel3D( c( 64, 64, 64, 1 ) )

metric_multilabel_dice_coefficient <-
  custom_metric( "multilabel_dice_coefficient",
    multilabel_dice_coefficient )

loss_dice <- function( y_true, y_pred ) {
  -multilabel_dice_coefficient(y_true, y_pred)
}
attr(loss_dice, "py_function_name") <- "multilabel_dice_coefficient"

model \%>\% compile( loss = loss_dice,
  optimizer = optimizer_adam( lr = 0.0001 ),
  metrics = metric_multilabel_dice_coefficient )

print( model )

}
\author{
Tustison NJ
}
