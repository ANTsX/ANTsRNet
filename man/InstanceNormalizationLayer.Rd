% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/customNormalizationLayers.R
\docType{class}
\name{InstanceNormalizationLayer}
\alias{InstanceNormalizationLayer}
\title{Creates an instance normalization layer}
\value{
an instance normalization layer
}
\description{
Creates an instance normalization layer as described in the paper
}
\details{
\url{https://arxiv.org/abs/1701.02096}

with the implementation ported from the following python implementation

\url{https://github.com/keras-team/keras-contrib/blob/master/keras_contrib/layers/normalization/instancenormalization.py}
}
\section{Arguments}{

\describe{
\item{axis}{Integer specifying which axis should be normalized, typically
the feature axis.  For example, after a Conv2D layer with
\code{channels_first}, set axis = 2.  Setting \code{axis=-1L} will
normalize all values in each instance of the batch.  Axis 1
is the batch dimension for tensorflow backend so we throw an
error if \code{axis = 1}.}
\item{epsilon}{Small float added to the variance to avoid dividing by 0.}
\item{center}{If TRUE, add \code{beta} offset to normalized tensor.}
\item{scale}{If TRUE, multiply by \code{gamma}.}
\item{betaInitializer}{Intializer for the beta weight.}
\item{gammaInitializer}{Intializer for the gamma weight.}
\item{betaRegularizer}{Regularizer for the beta weight.}
\item{gammaRegularizer}{Regularizer for the gamma weight.}
\item{betaConstraint}{Optional constraint for the beta weight.}
\item{gammaConstraint}{Optional constraint for the gamma weight.}
}
}

\section{Details}{

\code{$initialize} instantiates a new class.

\code{$call} main body.

\code{$compute_output_shape} computes the output shape.
}

\examples{
InstanceNormalizationLayer$new()
InstanceNormalizationLayer$new(axis = 2L)
testthat::expect_error(InstanceNormalizationLayer$new(axis = 1L))

}
\author{
Tustison NJ
}
