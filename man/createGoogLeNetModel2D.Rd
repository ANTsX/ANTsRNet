% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/createGoogLeNetModel.R
\name{createGoogLeNetModel2D}
\alias{createGoogLeNetModel2D}
\title{2-D implementation of the GoogLeNet deep learning architecture.}
\usage{
createGoogLeNetModel2D(inputImageSize, numberOfClassificationLabels = 1000)
}
\arguments{
\item{inputImageSize}{Used for specifying the input tensor shape.  The
shape (or dimension) of that tensor is the image dimensions followed by
the number of channels (e.g., red, green, and blue).  The batch size
(i.e., number of training images) is not specified a priori.}

\item{numberOfClassificationLabels}{Number of segmentation labels.}
}
\value{
a GoogLeNet keras model
}
\description{
Creates a keras model of the GoogLeNet deep learning architecture for image 
recognition based on the paper
}
\details{
C. Szegedy, W. Liu, Y. Jia, P. Sermanet, S. Reed, D. Anguelov, D. Erhan, V. Vanhoucke, 
  A. Rabinovich, Going Deeper with Convolutions
C. Szegedy, V. Vanhoucke, S. Ioffe, J. Shlens, and Z. Wojna. Rethinking the Inception 
  Architecture for Computer Vision

available here:

https://arxiv.org/abs/1409.4842
        https://arxiv.org/abs/1512.00567

This particular implementation was influenced by the following python 
implementation:

https://github.com/fchollet/deep-learning-models/blob/master/inception_v3.py
}
\examples{

\dontrun{ 

library( keras )

mnistData <- dataset_mnist()

numberOfLabels <- length( unique( mnistData$train$y ) )

X_train <- array( mnistData$train$x, dim = c( dim( mnistData$train$x ), 1 ) )
Y_train <- keras::to_categorical( mnistData$train$y, numberOfLabels )

# we add a dimension of 1 to specify the channel size
inputImageSize <- c( dim( mnistData$train$x )[2:3], 1 )

googLeNetModel <- createGoogLeNetModel2D( inputImageSize = inputImageSize, 
  numberOfClassificationLabels = numberOfLabels )

googLeNetModel \%>\% compile( loss = 'categorical_crossentropy',
  optimizer = optimizer_adam( lr = 0.0001 ),  
  metrics = c( 'categorical_crossentropy', 'accuracy' ) )

track <- googLeNetModel \%>\% fit( X_train, Y_train, epochs = 40, batch_size = 32, 
  verbose = 1, shuffle = TRUE, validation_split = 0.2 )

# Now test the model

X_test <- array( mnistData$test$x, dim = c( dim( mnistData$test$x ), 1 ) )
Y_test <- keras::to_categorical( mnistData$test$y, numberOfLabels )

testingMetrics <- googLeNetModel \%>\% evaluate( X_test, Y_test )
predictedData <- googLeNetModel \%>\% predict( X_test, verbose = 1 )

}
}
\author{
Tustison NJ
}
