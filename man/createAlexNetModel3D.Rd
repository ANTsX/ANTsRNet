% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/createAlexNetModel.R
\name{createAlexNetModel3D}
\alias{createAlexNetModel3D}
\title{3-D implementation of the AlexNet deep learning architecture.}
\usage{
createAlexNetModel3D(inputImageSize, numberOfClassificationLabels = 1000,
  denseUnits = 4096, dropoutRate = 0)
}
\arguments{
\item{inputImageSize}{Used for specifying the input tensor shape.  The
shape (or dimension) of that tensor is the image dimensions followed by
the number of channels (e.g., red, green, and blue).  The batch size
(i.e., number of training images) is not specified a priori.}

\item{numberOfClassificationLabels}{Number of segmentation labels.}
}
\value{
an AlexNet keras model
}
\description{
Creates a keras model of the AlexNet deep learning architecture for image 
recognition based on the paper
}
\details{
A. Krizhevsky, and I. Sutskever, and G. Hinton. ImageNet Classification 
  with Deep Convolutional Neural Networks.

available here:

http://papers.nips.cc/paper/4824-imagenet-classification-with-deep-convolutional-neural-networks.pdf

This particular implementation was influenced by the following python 
implementation:

https://github.com/duggalrahul/AlexNet-Experiments-Keras/     
        https://github.com/lunardog/convnets-keras/
}
\examples{

\dontrun{ 

library( keras )

mnistData <- dataset_mnist()

numberOfLabels <- length( unique( mnistData$train$y ) )

X_train <- array( mnistData$train$x, dim = c( dim( mnistData$train$x ), 1 ) )
Y_train <- keras::to_categorical( mnistData$train$y, numberOfLabels )

# we add a dimension of 1 to specify the channel size
inputImageSize <- c( dim( mnistData$train$x )[2:3], 1 )

alexNetModel <- createAlexNetModel2D( inputImageSize = inputImageSize, 
  numberOfClassificationLabels = numberOfLabels, denseUnits = 4096,
  dropoutRate = 0.0 )

alexNetModel \%>\% compile( loss = 'categorical_crossentropy',
  optimizer = optimizer_adam( lr = 0.0001 ),  
  metrics = c( 'categorical_crossentropy', 'accuracy' ) )

track <- alexNetModel \%>\% fit( X_train, Y_train, epochs = 40, batch_size = 32, 
  verbose = 1, shuffle = TRUE, validation_split = 0.2 )

# Now test the model

X_test <- array( mnistData$test$x, dim = c( dim( mnistData$test$x ), 1 ) )
Y_test <- keras::to_categorical( mnistData$test$y, numberOfLabels )

testingMetrics <- alexNetModel \%>\% evaluate( X_test, Y_test )
predictedData <- alexNetModel \%>\% predict( X_test, verbose = 1 )

}
}
\author{
Tustison NJ
}
