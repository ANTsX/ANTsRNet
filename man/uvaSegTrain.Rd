% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/uvaSeg.R
\name{uvaSegTrain}
\alias{uvaSegTrain}
\title{Unsupervised variational autoencoder training}
\usage{
uvaSegTrain(patches, k, convControl, standardize = TRUE, patches2)
}
\arguments{
\item{patches}{input patch matrix, see \code{getNeighborhoodInMask}}

\item{k}{number of embedding layers}

\item{convControl}{optional named list with control parameters ( see code )
\itemize{
\item{hiddenAct}{ activation function for hidden layers eg relu}
\item{img_chns}{ eg 1 number of channels}
\item{filters}{ eg 32L}
\item{conv_kern_sz}{ eg 1L}
\item{front_kernel_size}{ eg 2L}
\item{intermediate_dim}{ eg 32L}
\item{epochs}{ eg 50}
\item{batch_size}{ eg 32}
\item{squashAct}{ activation function for squash layers eg sigmoid}
\item{tensorboardLogDirectory}{ tensorboard logs stored here }
}}

\item{standardize}{boolean controlling whether patches are standardized}

\item{patches2}{input target patch matrix, see \code{getNeighborhoodInMask},
may be useful for super-resolution}
}
\value{
model is output
}
\description{
Trains a variational autoencoding with a convolutional network. This is
followed by k-means clustering to produce a segmentation and probabilities.
}
\examples{

\dontrun{

library(ANTsR)
img <- ri( 1 ) \%>\% resampleImage( c(4,4) ) \%>\% iMath( "Normalize" )
mask = randomMask( getMask( img ), 50 )
r = c( 3, 3 )
patch = getNeighborhoodInMask( img, mask, r, boundary.condition = "NA" )
uvaSegModel = uvaSegTrain( patch, 6 )
}

}
\author{
Avants BB
}
