% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/applyDBPN4x.R
\name{applySuperResolutionModel}
\alias{applySuperResolutionModel}
\title{applySuperResolutionModel}
\usage{
applySuperResolutionModel(
  image,
  model,
  targetRange,
  batch_size = 32,
  linmatchOrder,
  mask,
  verbose = FALSE
)
}
\arguments{
\item{image}{input image}

\item{model}{model object or filename see \code{getPretrainedNetwork}}

\item{targetRange}{a vector defining min max of each the input image,
eg -127.5, 127.5.  Output images will be scaled back to original intensity.
This range should match the mapping used in the training of the network.}

\item{batch_size}{for prediction call}

\item{linmatchOrder}{if not missing, then apply \code{linMatchIntensity} with given fit parameter}

\item{mask}{restrict intensity rescaling parameters within the mask}

\item{verbose}{If \code{TRUE}, show status messages}
}
\value{
image upscaled to resolution provided by network
}
\description{
Apply pretrained super-resolution network
}
\details{
Apply a patch-wise trained network to perform super-resolution. Can be applied
to variable sized inputs. Warning: This function may be better used on CPU
unless the GPU can accommodate the full image size. Warning 2: The global
intensity range (min to max) of the output will match the input where the
range is taken over all channels.
}
\examples{
\donttest{
library(ANTsRCore)
orig_img = antsImageRead( getANTsRData( "r16" ) )
# input needs to be 48x48
img = resampleImage(orig_img,
resampleParams = rep(256/48, 2))
model = getPretrainedNetwork( "dbpn4x" )
simg <- applySuperResolutionModel(img,  model = model)
plot(orig_img)
plot(img)
plot(simg)
}
}
\author{
Avants BB
}
